\use-plugin{concourse-docs}

\release-date{2016-07-06}
\release-version{1.4.0}
\release-garden-runc-version{0.4.0}

\note{feature}{
  We've revamped our container retention configuration.

  Previously, containers used by failed builds would stick around for 1 hour,
  and containers for succeeded builds would stick around for 5 minutes. This
  was pretty dumb. It meant if you had frequently failing builds, containers
  (and disk usage) would pile up, and if you had a build that failed
  overnight, you wouldn't be able to investigate anything in the morning.

  Instead, as long as the most recent build of a job is failed or errored,
  we'll keep it around indefinitely. It will be let go as soon as a new build
  finishes successfully, or fails, in which case that build will be retained
  instead.
}

\note{fix}{
  We've fixed a hairy issue that resulted in artifacts sometimes
  disappearing in the middle of a build. This issue primarily affected
  users with more than one worker.
}

\note{fix}{
  The new container retention semantics also fix the "volume mounted to
  container is missing" bug with hijacking.
}

\note{fix}{
  We've bumped the version of the Go AWS SDK used by the S3 resource. This
  should fix some issues related to long-running uploads and downloads.
}

\note{fix}{
  \reference{fly-sync} now shows a progress bar. You're welcome.
}

\note{fix}{
  Some of y'all with BIG DATA had volumes too large to fit their reported
  size in the database. That should work now.
}

\note{feature}{
  We've bumped to Garden-runC v0.4.0, which should fix the \code{iptables}
  "resource temporarily unavailable" error.
}

\note{fix}{
  We've gone back to a safer method of killing container process when
  aborting a build. We had initially switched to signalling the parent
  process and then killing it if it didn't exit after 10 seconds, however in
  a lot of cases this would just result in things not exiting when the
  process tree is sufficiently complex. This also resulted in the
  \resource{pool} not giving up in its attempt loop when aborted.
}

\note{fix}{
  Previously if a worker left the pool at an inopportune moment, Concourse
  would forget about its volumes, which led to things getting into a wedged
  state. This is now fixed. You should never have to pause your pipeline to
  "let it breathe" again.
}
