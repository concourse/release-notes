\use-plugin{concourse-docs}

\release-date{2017-2-10}
\release-version{2.7.0}
\release-garden-runc-version{1.1.1}

\note{fix}{
  A long-standing bug in Golang's \code{golang.org/x/crypto/ssh} package has
  been fixed. This bug led to workers becoming stuck and/or unregistered
  after 1GB of data was transferred over their SSH connection. This resulted
  in builds being stuck in a pending/started state, and resource checking no
  longer occurring.

  This bug affected many people with workers forwarding their registration
  through the TSA, as is the default for the binary distribution, and is a
  common configuration for external workers.

  For more info, read on.

  \italic{Context:} Workers register via a single long-lived SSH connection.
  As a baseline, heartbeating and logging goes over this connection, but if
  the worker is \italic{forwarded} through the TSA, all API calls and data
  transfer will \italic{also} be sent over this encrypted connection (rather
  than directly to the worker).

  \italic{The bug:} Per the SSH RFC, after some amount of data transfer (1GB
  by default), a new key is negotiated, so that the connection's encryption
  has sufficient entropy. The Golang library had a logic error that led to a
  deadlock during this key negotiation. This led to the connection being
  "alive" but with the SSH server no longer able to transfer data to and from
  the worker. This meant API calls would hang, and the worker would
  eventually unregister as it would fail to heartbeat. The client-side of the
  worker registration would be stuck waiting for a keepalive response, and so
  it would never break the connection and recover.

  GitHub issues
  \link{#18439}{https://github.com/golang/go/issues/18439}, and later
  \link{#18711}{https://github.com/golang/go/issues/18711} and
  \link{#18850}{https://github.com/golang/go/issues/18850} track the
  journey through debugging and the path to the fix. Thanks to
  \ghuser{hanwen} for fixing it, and \ghuser{databus23} for helping keep
  track of all this!
}

\note{feature}{
  The \reference{fly-targets} command will now show the team saved for each
  target, thanks to a PR from \ghuser{joonas}!
}

\note{feature}{
  The \reference{fly-login} command will now remember the team you were
  targeted with, making it easier to log back in to the same team and have
  per-team targets.
}

\note{fix}{
  Previously if you configured an \code{--external-url} using a hostname
  (e.g. \code{http://some.dns.name:8080}) the ATC would have bogus links for
  the login flow. This has been fixed.
}

\note{fix}{
  Previously if you were logged in, and then your cookie became invalid but
  didn't expire (e.g. your session signing key got rotated, possibly via a
  stemcell update), you wouldn't be able to log in again via basic auth until
  the cookie was deleted. This has now been fixed.
}

\note{feature}{
  The ATC's \code{--development-mode} flag has been removed in favor of
  having an explicit flag for \code{--log-level} and a flag for
  \code{--no-really-i-dont-want-any-auth}. The BOSH properties have also been
  updated accordingly.
}

\note{fix}{
  Previously if the ATC startup was interrupted at an inopportune moment
  during first-time setup, the internal table for tracking migrations
  progress could be left in a partially-created unrecoverable state. This has
  been fixed.
}

\note{fix}{
  We've fixed an issue in the worker lifecycle wherein a worker that was
  landing blew up and then tried to come back under a different name, but
  with the same IP. This could happen if a worker was initially being landed
  normally, but then a cosmic ray blasted into your infrastructure's
  datacenter and caused BOSH to recreate the VM instead.

  Now, instead of the new worker being unable to register, it'll...be able to
  register. The old, cosmic-ray-obliterated worker will still be around
  (under the original name, in \code{landed} state), and you'll just have to
  run \reference{fly-prune-worker} to clean it up.
}
